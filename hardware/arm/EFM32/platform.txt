# Map of EFM32xx drivers
# configured by huaweiwx@sina.com 2016
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification

name=EFM32 GECKO
version=1.8.09

compiler.extra_includes="-I{build.path}/sketch"  {includes}  "-I{build.core.path}/efm32" "-I{build.system.path}" "-I{build.system.path}/CMSIS/inc" "-I{build.system.path}/emlib/inc" "-I{build.system.path}/SiliconLabs/{build.series}/Include"

compiler.warning_flags=-w 
compiler.warning_flags.none=-w {build.log_level}
compiler.warning_flags.default={build.log_level}
compiler.warning_flags.more=-Wall {build.log_level}
compiler.warning_flags.all=-Wall -Wextra {build.log_level}

# compiler variables
# -----------------------------------------------------------------------------------
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/

compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-c -g -Os -std=gnu11 {compiler.warning_flags} -MMD -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -D{build.vect} 

compiler.c.elf.cmd=arm-none-eabi-g++
compiler.c.elf.flags=-Os -Wl,--gc-sections

compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp -MMD

compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-c -g -Os -std=gnu++14 {compiler.warning_flags} -MMD -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -fno-rtti -D{build.vect}

compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs

compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0

compiler.elf2hex.flags=-O binary
compiler.elf2hex.flags2=-O ihex
compiler.elf2hex.cmd=arm-none-eabi-objcopy

compiler.ldflags=
compiler.size.cmd=arm-none-eabi-size
compiler.define=-DARDUINO=                            

# this can be overriden in boards.txt
# this is the static library built by the gun ar tool
# build.variant_system_lib=libmaple.a

build.cpu_flags=
build.hs_flag=
build.common_flags=
build.extra_flags= {build.mcu} {build.cpu_flags} {build.hs_flag} {build.common_flags} -DF_CPU={build.f_cpu} -DOSC={build.osc} -DARDUINO={runtime.ide.version} -DEFM32GENERIC -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags_serial}

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags="-L{build.variant.path}/ld"
compiler.cpp.extra_flags= 
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

## Compiler include paths  
# sheepdoll a better more generic library include paths
compiler.libs.c.flags={compiler.extra_includes}

# build patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {build.extra_flags} {compiler.c.extra_flags} {compiler.libs.c.flags}  "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {build.extra_flags} {compiler.cpp.extra_flags} {compiler.libs.c.flags} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} {build.extra_flags} {compiler.S.extra_flags} {compiler.libs.c.flags} "{source_file}" -o "{object_file}"
 
## Create archives
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {build.mcu} {compiler.c.elf.flags} "-T{build.variant.path}\{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -lm -lgcc -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-unresolved-symbols -Wl,--entry=Reset_Handler -Wl,--start-group {object_files} -Wl,--whole-archive "{archive_file_path}" -Wl,--no-whole-archive -Wl,--end-group

## Create eeprom
recipe.objcopy.eep.pattern=

## Create bin
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags2} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Save Compiled Binary
recipe.output.tmp_file.bin={build.project_name}.bin
recipe.output.save_file.bin={build.project_name}.{build.variant}.bin
recipe.output.tmp_file.hex={build.project_name}.hex
recipe.output.save_file.hex={build.project_name}.{build.variant}.hex
recipe.output.tmp_file.elf={build.project_name}.elf
recipe.output.save_file.elf={build.project_name}.{build.variant}.elf

## Compute size
# ---------------------
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.rodata)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\._user_heap_stack)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

# Uploader tools
# -------------------

# serial upload
tools.serial_upload.cmd=serial_upload
tools.serial_upload.cmd.windows=serial_gdup.bat
tools.serial_upload.cmd.macosx=serial_upload
tools.serial_upload.path={runtime.hardware.path}/tools/win
tools.serial_upload.path.macosx={runtime.hardware.path}/tools/macosx
tools.serial_upload.path.linux={runtime.hardware.path}/tools/linux

tools.serial_upload.upload.params.verbose=-d
tools.serial_upload.upload.params.quiet=n
tools.serial_upload.upload.pattern="{path}/{cmd}" {serial.port.file} {upload.altID} {upload.usbID} "{build.path}/{build.project_name}.bin"  -S{build.uploadadr} -g{build.uploadadr} 

# router upload
tools.upload_router.cmd=upload_router
tools.upload_router.cmd.windows=upload_router.bat
tools.upload_router.path={runtime.hardware.path}/tools/win
tools.upload_router.path.macosx={runtime.hardware.path}/tools/macosx
tools.upload_router.path.linux={runtime.hardware.path}/tools/linux

tools.upload_router.upload.params.verbose=-d
tools.upload_router.upload.params.quiet=
tools.upload_router.upload.pattern="{path}/{cmd}" {serial.port.file} {upload.altID} {upload.usbID} "{build.path}/{build.project_name}" {upload.protocol} {build.debuggingMode} "{runtime.ide.path}/hardware/tools/{build.gcc_ver}/bin/"

# jLINK/V21 upload
tools.jlink_upload.cmd=jlink_upload
tools.jlink_upload.cmd.windows=jlinkob_upload.bat
tools.jlink_upload.path.windows={runtime.ide.path}/hardware/tools/win
tools.jlink_upload.path.macosx={runtime.ide.path}/hardware/tools/macosx
tools.jlink_upload.path.linux={runtime.ide.path}/hardware/tools/linux

tools.jlink_upload.upload.params.verbose=-d
tools.jlink_upload.upload.params.quiet=
tools.jlink_upload.upload.pattern="{path}/{cmd}" {serial.port.file} {upload.altID} {upload.usbID} "{build.path}/{build.project_name}.hex" {upload.device} {build.uploadadr} {build.vect} 
 
# blackmagic probe upload
tools.bmp_upload.cmd=arm-none-eabi-gdb
#tools.bmp_upload.cmd.windows=bmp_upload.bat
tools.bmp_upload.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
#tools.bmp_upload.path.windows={runtime.hardware.path}/tools/win

tools.bmp_upload.upload.speed=230400
tools.bmp_upload.upload.params.verbose=
tools.bmp_upload.upload.params.quiet=-q --batch-silent
tools.bmp_upload.upload.pattern="{path}{cmd}" -cd "{build.path}" -b {upload.speed} {upload.verbose} -ex "set debug remote 0" -ex "set target-async off" -ex "set remotetimeout 60" -ex "set mem inaccessible-by-default off" -ex "set confirm off" -ex "set height 0" -ex "target extended-remote {serial.port}" -ex "monitor swdp_scan" -ex "attach 1" -ex "x/wx 0x8000004" -ex "monitor erase_mass" -ex "echo 0x8000004 expect 0xffffffff after erase\n" -ex "x/wx 0x8000004" -ex "file {build.project_name}.elf" -ex "load" -ex "x/wx 0x08000004" -ex "tbreak main" -ex "run" -ex "echo \n\n\nUpload finished!" -ex "quit"
#tools.bmp_upload.upload.pattern.windows="{path}/{cmd}"  {runtime.tools.arm-none-eabi-gcc.path}/bin/ {upload.speed} {upload.verbose}  "target extended-remote {serial.port}" "{build.path}/{build.project_name}.elf"
